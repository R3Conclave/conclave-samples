#!/usr/bin/env bash
# Copyright 2020 R3 Ltd.
#
# This script is intended to assist with development on macOS. It starts a Docker container with everything
# needed to build Conclave apps on Linux, along with whatever Linux JDK you have in your LINUX_JAVA_HOME environment
# variable. You can then run Gradle in your project directory to e.g. execute your app or run unit tests.
#
# Because Docker/Host filesystem access is very slow, we also configure an in-memory overlay filesystem. This ensures
# the app builds to RAM instead of slow disk. Any changes made inside the container will remain there until the container
# is explicitly deleted. Therefore you should NOT attempt to modify things there.

# Uncomment this line to see each command as it's executed:
# set -o xtrace

if [[ "$LINUX_JAVA_HOME" == "" ]]; then
  # Use the Java 11 built in to the Conclave build container.
  MAP_JAVA_HOME=""
  CONTAINER_JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
else
  MAP_JAVA_HOME="-v $LINUX_JAVA_HOME:/jdk"
  CONTAINER_JAVA_HOME=/jdk
fi

PROJECT_DIR_NAME=$( basename $PWD )

if [ ! -e "gradle.properties" ]; then
  echo "Please run this script from the directory that contains your root Gradle build system for your Conclave project (looking for gradle.properties file)."
  exit 1
fi

if [[ $(uname) != "Darwin" ]]; then
  echo "This script is intended for macOS users. If you're already on Linux you shouldn't need it, you can just run your host app directly."
  exit 1
fi

CONCLAVE_VERSION=$(cat gradle.properties | col -b | awk -F= '$1 ~ /^conclaveVersion$/ { print $2 }')
DEFAULT_SDK_LOCATION=$(cat gradle.properties | col -b | awk -F= '$1 ~ /^defaultSdkLocation/ { print $2 }')
CONCLAVE_REPO=$(cat gradle.properties | col -b | awk -F= '$1 ~ /^conclaveRepo/ { print $2 }')

if $DEFAULT_SDK_LOCATION ; then
  if [ ! -d $HOME'/conclave-sdk/'$CONCLAVE_VERSION'/repo' ]; then
      echo "Please install Conclave SDK at ~/conclave-sdk/{version}"
  else
      REPO_PATH=$HOME'/conclave-sdk/'$CONCLAVE_VERSION'/repo'
      echo $REPO_PATH
  fi
else
if [ ! "$CONCLAVE_REPO" ]; then
    echo "There should be a property called conclaveRepo in the gradle.properties file, pointing to the repo sub-directory of your Conclave SDK."
  else
    REPO_PATH=$CONCLAVE_REPO
    echo $REPO_PATH
  fi
fi

if [[ ${REPO_PATH:0:1} == "/" ]]; then
  ABSOLUTE_REPO_PATH=$REPO_PATH
else
  ABSOLUTE_REPO_PATH="$PWD/$REPO_PATH"
fi

function print_rm_help() {
  echo -e "Restart Docker or run \x1B[1m\x1B[34mdocker rm -f $CONTAINER_ID\x1B[0m to delete it (this will wipe your build in /overlay)."
}

function setup_overlay() {
  # Set up an overlayfs so builds go to ramdisk. This makes it fast, whereas otherwise it's really slow because
  # Docker uses a gRPC FUSE file system to bind macOS directories to the Linux VM!
  OVERLAY_CMD="[ ! -d /overlay ] && mkdir /overlay; [ ! -d /tmp/overlay/upper ] && mkdir -p /tmp/overlay/{upper,work}; mount -t overlay overlay -o lowerdir=/project/,upperdir=/tmp/overlay/upper,workdir=/tmp/overlay/work /overlay; cd /overlay"
  docker exec --privileged $CONTAINER_ID bash -c "$OVERLAY_CMD"
}

function exec_gradle() {
  exec docker exec -it -w /overlay $CONTAINER_ID ./gradlew -PconclaveRepo=/repo $@
}

# Is the container currently running?
if [ -e container-id ]; then
  CONTAINER_ID=$(cat container-id)

  # Has the container been totally deleted?
  CONTAINER_STATUS=$( docker inspect --format '{{.State.Running}}' $CONTAINER_ID 2>&1 )
  if [[ "$CONTAINER_STATUS" =~ "No such object" ]]; then
    # container-id file is stale so remove it.
    rm container-id
  else
    if [[ $CONTAINER_STATUS == "true" ]]; then
      # Container is running already.
      # Has the user changed their preferred Linux JDK after the container started?
      if [[ "$LINUX_JAVA_HOME" != "" && $(docker inspect --format '{{.Config.Labels.LINUX_JAVA_HOME}}' $CONTAINER_ID) != "$LINUX_JAVA_HOME" ]]; then
        echo "The running container is using a different JDK location than the one you specified in LINUX_JAVA_HOME=$LINUX_JAVA_HOME"
        print_rm_help
        exit 2
      fi

      # All good, so start Gradle inside the container and we're done here. This is the "hot path".
      exec_gradle "$@"
    else
      # Container exists but isn't running. Start it back up and restore the overlay mounts.
      docker start $CONTAINER_ID >/dev/null || exit $?
      setup_overlay
      exec_gradle "$@"
    fi
  fi
fi

# Try to create it based on the conclave-build container.
function create_container() {
  CONTAINER_PORT=${CONTAINER_PORT:-9999}
  PORT_FLAG="-p $CONTAINER_PORT:$CONTAINER_PORT"
  CONTAINER_ID=$(
    docker run -it -d \
      -v "$PWD:/project" \
      -v "$ABSOLUTE_REPO_PATH:/repo" \
      $MAP_JAVA_HOME \
      -e "JAVA_HOME=$CONTAINER_JAVA_HOME" \
      $PORT_FLAG \
      --privileged \
      --label LINUX_JAVA_HOME=$LINUX_JAVA_HOME \
      --label CONCLAVE_EXECUTE_CONTAINER \
      --name "$PROJECT_DIR_NAME" \
      --tmpfs /tmp:defaults,exec,noatime,rw \
      conclave-build \
      bash 2>&1
  )
  RESULT=$?
  if [[ $RESULT == 0 && -d "$HOME/.gradle" ]]; then
    echo "Copying \$HOME/.gradle to the container ..."
    docker cp "$HOME/.gradle" "$CONTAINER_ID:/root/.gradle"
  fi
}

create_container
if (( $RESULT != 0 )); then
  # Might be due to the user not being set up yet.
  if [[ "$CONTAINER_ID" =~ .*Unable.to.find.image.* ]]; then
    # We provide a Gradle task to unpack the Docker image and install it.
    echo -e "Running \x1B[1m\x1B[34m./gradlew enclave:setupLinuxExecEnvironment\x1B[0m to initialise the needed Docker image."
    echo "If your enclave module isn't called 'enclave' then this won't work, in that case please do it yourself."
    echo

    ./gradlew enclave:setupLinuxExecEnvironment || exit 2
    create_container
  fi
  # Either some other reason, or we failed even after initial setup.
  if (( $RESULT != 0 )); then
    echo "$CONTAINER_ID" >/dev/stderr
    exit $?
  fi
fi

setup_overlay
echo "Container ID: $CONTAINER_ID"
echo "$CONTAINER_ID" > container-id
echo
print_rm_help
echo
exec_gradle "$@"
